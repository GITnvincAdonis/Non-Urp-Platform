// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Simplex.compute"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct GrassData
{
    float3 Position;
    float3 Rotation;
    float Scale;
};

RWStructuredBuffer<GrassData> positionBuffer;
RWTexture2D<float4> Result;
int _Dimension,_scale,_maxScale,_minScale;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x < uint(_Dimension) && id.y < uint(_Dimension))
    {
        GrassData tempStruct;
        float3 position = 0.0f;
    
        position.xz = (id.xy - float(_Dimension) * 0.5) * (2.0f / float(_scale));
        position.x += snoise(float3(position.xz, 0.0f) * 15.0f) * 10;
        position.z += snoise(float3(position.xz, 0.0f) * 10.0f) * 4;
        
        
        float localYRot = snoise(float3(position.xz, 40) * 40.0f) * 0500;
        tempStruct.Position = position;
        tempStruct.Rotation = float3(1, -1 * localYRot, 10);
        tempStruct.Scale = max(snoise(float3(position.xz, 0.0f) * .10f) * _maxScale , _minScale);
        positionBuffer[id.x + id.y * _Dimension] = tempStruct;
    }
    
    
}
