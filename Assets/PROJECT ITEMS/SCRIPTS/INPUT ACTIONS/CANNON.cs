//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PROJECT ITEMS/SCRIPTS/INPUT ACTIONS/CANNON.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CANNON: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CANNON()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CANNON"",
    ""maps"": [
        {
            ""name"": ""CannonControls"",
            ""id"": ""45feca9e-27d8-4991-aba5-0e0f52a54b11"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""aaff0ad6-17cd-491c-b12f-ab50c637dbda"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""9b93adbc-8adf-4a67-ab63-7648bfd4d7d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5ded831a-71ef-4c66-ac76-44cd4466cd59"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""18728cce-c35e-48d5-b3c5-93df0171feae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4957ca0d-25df-48ed-a0ce-567ccd8c3b6b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""21c3a9bf-d586-4189-98e6-5a4939f07e48"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3f7001c-1395-4733-95f5-5c193b9ebfbe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""98d0df58-e46a-415b-a050-9d50e2931345"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CannonControls
        m_CannonControls = asset.FindActionMap("CannonControls", throwIfNotFound: true);
        m_CannonControls_WASD = m_CannonControls.FindAction("WASD", throwIfNotFound: true);
        m_CannonControls_Release = m_CannonControls.FindAction("Release", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CannonControls
    private readonly InputActionMap m_CannonControls;
    private List<ICannonControlsActions> m_CannonControlsActionsCallbackInterfaces = new List<ICannonControlsActions>();
    private readonly InputAction m_CannonControls_WASD;
    private readonly InputAction m_CannonControls_Release;
    public struct CannonControlsActions
    {
        private @CANNON m_Wrapper;
        public CannonControlsActions(@CANNON wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_CannonControls_WASD;
        public InputAction @Release => m_Wrapper.m_CannonControls_Release;
        public InputActionMap Get() { return m_Wrapper.m_CannonControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CannonControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICannonControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CannonControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CannonControlsActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Release.started += instance.OnRelease;
            @Release.performed += instance.OnRelease;
            @Release.canceled += instance.OnRelease;
        }

        private void UnregisterCallbacks(ICannonControlsActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Release.started -= instance.OnRelease;
            @Release.performed -= instance.OnRelease;
            @Release.canceled -= instance.OnRelease;
        }

        public void RemoveCallbacks(ICannonControlsActions instance)
        {
            if (m_Wrapper.m_CannonControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICannonControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CannonControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CannonControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CannonControlsActions @CannonControls => new CannonControlsActions(this);
    public interface ICannonControlsActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
    }
}
